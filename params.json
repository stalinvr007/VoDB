{"name":"Vodb","tagline":"Virtual Object DataBase","body":"## Getting Started\r\n1. Create a class to represent a database table/model.\r\n2. Create properties to represents the fields for that model.\r\n3. Decorate the properties with [DbField, DbKey, DbIdentity, DbRequired, DbBind, DbIgnore] See [Employee.cs](https://github.com/AlienEngineer/VoDB/blob/master/VODB.Tests/Models/Northwind/Employee.cs)\r\n * [DbField]    -> Allows users to specify the physical name of the field;\r\n * [DbKey]\t\t -> Well... its a key...\r\n * [DbIdentity] -> The field is the Identity field increasing automatically;\r\n * [DbRequired] -> Allows the framework to check for the required fields before executing SQL commands.\r\n * [DbBind] -> Lets the framework know whats the key field in the associated table/entity. Use only when field names don't match.\r\n * [DbIgnore] -> Tells the framework to ignore a field from mapping.\r\n4. Create a ConnectionString entry in the app.config/web.config file with the name of your machine.\r\n * set the providerName to System.Data.SqlClient or other...\r\n\r\n## Get one employee\r\n```C#\r\nusing (var session = new Session()) {\r\n   Employee employee = session.GetById(Employee { EmployeeId = 1 });\r\n}\r\n```\r\n\r\n## Get all employees\r\n```C#\r\nusing (var session = new Session()) {\r\n   IEnumerable<Employee> employees = session.GetAll<Employee>();\r\n}\r\n```\r\n\r\n## Filtering employees\r\n```C#\r\n// simple query\r\nusing (var session = new Session()) {\r\n   IEnumerable<Employee> employees = \r\n       session.GetAll<Employee>().Where(e => e.EmployeeId > 5);\r\n}\r\n\r\n// more complex query\r\nusing (var session = new Session()) {\r\n   IEnumerable<Employee> employees = session.GetAll<Employee>()\r\n       .Where(e => e.ReportsTo).In(\r\n           session.GetAll<Employee>().Where(e => e.EmployeeId > 5)\r\n       );\r\n   // Or\r\n   IEnumerable<Employee> employees = session.GetAll<Employee>().Where(e => e.ReportsTo.EmployeeId > 5)\r\n}\r\n```\r\n\r\n## Sort employees\r\n```C#\r\nusing (var session = new Session()) {\r\n   IEnumerable<Employee> employees = \r\n       session.GetAll<Employee>().OrderBy(e => e.City);\r\n}\r\n// or ...\r\nusing (var session = new Session()) {\r\n   IEnumerable<Employee> employees = \r\n       session.GetAll<Employee>().OrderBy(e => e.City).Descending();\r\n}\r\n```\r\n\r\n## Precompiled Queries\r\n```C#\r\n   var query = Select.All.From<Employee>().Where(e => e.ReportsTo).In(\r\n      Select.All.From<Orders>()\r\n   );\r\n   \r\n   IEnumerable<Employee> employees = session.ExecuteQuery<Employee>(query);\r\n```\r\n\r\n## Inserting employee\r\n```C#\r\nusing (var session = new Session()) {\r\n   Employee Sergio = session.Insert(new Employee \r\n   {\r\n      FirstName = \"SÃ©rgio\",\r\n      LastName = \"Ferreira\",\r\n      BirthDate = new DateTime(1983, 4, 16)\r\n   });\r\n}\r\n```\r\n\r\n## Updating employee\r\n```C#\r\nusing (var session = new Session()) {\r\n   Employee employee = session.GetById(Employee { EmployeeId = 1 });\r\n   employee.BirthDate = new DateTime(1983, 4, 16);\r\n\r\n   session.Update(employee);\r\n}\r\n```\r\n\r\n## Deleting employee\r\n```C#\r\nusing (var session = new Session()) {\r\n   session.Delete(new Employee { EmployeeId = 1 });\r\n}\r\n```\r\n\r\n## Executing within a transaction\r\n```C#\r\n// Executing operations within a transaction.\r\n   using (var session = new Session()) {\r\n      using (var transaction = session.BeginTransaction()) {\r\n\r\n         // Make changes.\r\n\r\n         // Rolls back any change to the database.\r\n         transaction.RollBack();\r\n         // Commits the changes within this transaction scope.\r\n         transaction.Commit();\r\n\r\n         using(var innerTrans = session.BeginTransaction()) {\r\n             // Make changes. If the rollback occurs then all transactions are void.\r\n         }\r\n      }\r\n   }\r\n\r\n   // Or\r\n   using (var session = new Session()) {\r\n      session.WithinTransaction( () => {\r\n\r\n          // Do something here\r\n\r\n      }); // Commits the changes\r\n   }\r\n```\r\n\r\n### Support or Contact\r\nIf you have any suggestions for this project or something is not working right please contact me at Alien.Software.Engineer@gmail.com or @AlienEngineer","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}