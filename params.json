{"name":"Vodb","tagline":"Virtual Object DataBase","body":"### Getting Started\r\n1. Create a class to represent a database table/model.\r\n2. Derive it from DbEntity.\r\n3. Create properties to represents the fields for that model.\r\n4. Decorate the properties with [DbField, DbKey, DbIdentity, DbRequired, DbBind, DbIgnore] See [Employee.cs](https://github.com/AlienEngineer/VoDB/blob/master/VODB.Tests/Models/Northwind/Employee.cs)\r\n * [DbField]    -> Allows users to specify the physical name of the field;\r\n * [DbKey]\t\t -> Well... its a key...\r\n * [DbIdentity] -> The field is the Identity field increasing automatically;\r\n * [DbRequired] -> Allows the framework to check for the required fields before executing SQL commands.\r\n * [DbBind] -> Lets the framework know whats the key field in the associated table/entity. Use only when field names don't match.\r\n * [DbIgnore] -> Tells the framework to ignore a field from mapping.\r\n5. Create a ConnectionString entry in the app.config/web.config file with the name of your machine.\r\n * set the providerName to System.Data.SqlClient or other...\r\n\r\n### Example\r\n```C#\r\n// Basic example for CRUD Operations.\r\nusing (var session = new Session()) {\r\n   // Get Employee data.\r\n   Employee employee1 = session.GetById(\r\n        new Employee() { EmployeeId = 1 }\r\n   );\r\n\r\n   // Get All Employees.\r\n   IEnumerable<Employee> employees = session.GetAll<Employee>();\r\n\r\n   // Get All Employees with the EmployeeId greater than 5. \r\n   // Makes a conditional sql statement, doesn't use the Linq library. \r\n   // Therefore doesn't load all the employees.\r\n   IEnumerable<Employee> employees1 = \r\n   session.GetAll<Employee>().Where(e => e.EmployeeId > 5);\r\n\r\n   // Order matters\r\n   // Select * From Employees Order By City\r\n   IEnumerable<Employee> employees2 = \r\n   session.GetAll<Employee>().OrderBy(e => e.City);\r\n\r\n   // Select * From Employees Order By City Desc\r\n   IEnumerable<Employee> employees3 = \r\n   session.GetAll<Employee>().OrderBy(e => e.City).Descending();\r\n\r\n   var collection = session\r\n      .GetAll<Employee>().Where(m => m.EmployeeId <= 5);\r\n\r\n   /* Select * from Employees \r\n      where EmployeeId In (\r\n        Select EmployeeId From Employees where EmployeeId <= 5) \r\n   */\r\n   var employees4 = session\r\n     .GetAll<Employee>().Where(m => m.EmployeeId).In(collection);\r\n\r\n   // Insert a new Employee\r\n   Employee Sergio = session.Insert(new Employee() {\r\n                    FirstName = \"SÃ©rgio\",\r\n                    LastName = \"Ferreira\",\r\n                    BirthDate = new DateTime(1983, 4, 16)\r\n   });\r\n\r\n   // Change a field.\r\n   sergio.LastName = \"test\";\r\n   // Update the employee.\r\n   session.Update(sergio);\r\n   // Deletes the employee.\r\n   session.Delete(sergio);\r\n}\r\n```\r\n\r\n```C#\r\n// Executing operations within a transaction.\r\n   using (var session = new Session()) {\r\n      using (var transaction = session.BeginTransaction()) {\r\n\r\n         // Make changes.\r\n\r\n         // Rolls back any change to the database.\r\n         transaction.RollBack();\r\n         // Commits the changes within this transaction scope.\r\n         transaction.Commit();\r\n\r\n      }\r\n   }\r\n\r\n   // Or\r\n   using (var session = new Session()) {\r\n      session.WithinTransaction( () => {\r\n\r\n          // Do something here\r\n\r\n      }); // Commits the changes\r\n   }\r\n```\r\n\r\n### Support or Contact\r\nIf you have any suggestions for this project or something is not working right please contact me at Alien.Software.Engineer@gmail.com or @AlienEngineer","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}